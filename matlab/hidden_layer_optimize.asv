% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Thu Oct 13 14:05:11 EEST 2011
%
% This script assumes these variables are defined:
%
%   training_set - input data.
%   t - target data.

rng(9); % laitetaan randomin seediksi luku, ett� toimii joka kerta samoin.

N = 10000;
train_N = 10000;
evaluation_N = N - train_N;
data = dlmread('data.txt',' ', 0, 0);
data = data(randperm(N),:);  % sekoitetaan koko datajoukko

% N�it� k�ytet��n opettamiseen
train_T = data(1:train_N,2);
train_X =data(1:train_N,3:end);

evaluation_T = data(train_N+1:evaluation_N, 2);
evaluation_X = data(train_N+1:evaluation_N, 3:end);

means = mean(train_X);
train_X_centered = train_X - repmat(means,size(train_X,1),1);
[coeff, score, lambdas] = princomp(train_X_centered);

% Draws Proportion of Variances and selects how many principal components
% should be selected.
p = piirra_pca(lambdas, 0.8);
W = coeff(:,1:p);
targets = train_T';
inputs = (W' * train_X_centered');

% Create a Pattern Recognition Network
% T�ss� on Erilaisia hiddenlayer kokoja, juoksevat luvut indeksej�, jotka
% t�sm��v�t bestSizes matriisin kolmanteen ulottuvuuteen.
possibilities = [ 
    1 1;
%     2 2;
%     3 3;
%     4 4;
%     5 5;
%     6 6;
%     7 7;
%     8 8;
%     9 9;
%    10 10;
%     4 60;
%     3 100;
%     4 200;
%     5 300;
    ]';
accuracies = zeros(size(possibilities,2),1);
bestSizes = zeros(3,2,size(possibilities,2));
% TN FN
% FP TP

for hiddenLayerSize =  possibilities
    net = patternnet(hiddenLayerSize(2),'trainlm');
    
    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 10/100;
    net.divideParam.valRatio = 10/100;
    net.divideParam.testRatio = 80/100;
    
    % Train the Network
    [net,tr] = train(net,inputs,targets);
    
    % Test the Network
    outputs = net(inputs);
    
    % Write my own confusion table for the output
    tmp = quality(outputs, targets);    
    bestSizes(:,:,hiddenLayerSize(1)) = tmp;
    bestSizes(1,2,hiddenLayerSize(1)) = hiddenLayerSize(2);
    accuracies(hiddenLayerSize(1)) = tmp(1,1);
end
disp(bestSizes);

% tietoja = zeros(10,10);
% cycles = 20;
% for h = 1:10
%     for index = 1:cycles
%         net = patternnet(h,'trainlm');
%     
%         % Setup Division of Data for Training, Validation, Testing
%         net.divideParam.trainRatio = 10/100;
%         net.divideParam.valRatio = 10/100;
%         net.divideParam.testRatio = 80/100;
%         
%         % Train the Network
%         [net,tr] = train(net,inputs,targets);
%         
%         % Test the Network
%         outputs = net(inputs);
%         
%         % Write my own confusion table for the output
%         tmp = quality(outputs, targets);
%         tietoja(index,h) = tmp(1,1);
%     end
% end
% variances = zeros(1,10);
% means = zeros(1,10);
% for indeksi = 1 : 10
%     valid_values_i = find(tietoja(:,indeksi) > 0.9);
%     valid_values = tietoja(valid_values_i,indeksi);
%     means(indeksi) = mean(valid_values);
%     variances(indeksi) = std(valid_values);
% end
% errorbar(1:10,means,variances);

% [~,bestSize_index] = max(bestSizes(1,1,:));
% fail_count = 0;
% tests = 20;
% bins = zeros(1,20);
% for index = 1:tests
%     net = patternnet([bestSize_index 5], 'trainlm');
%     net.divideParam.trainRatio = 70/100;
%     net.divideParam.valRatio = 0/100;
%     net.divideParam.testRatio = 30/100;
%     [net,tr] = train(net,inputs,targets);
%     outputs = net(inputs);
%     q = quality(outputs, targets);
%     bins(ceil(q(1,1)/0.05)) = bins(ceil(q(1,1)/0.05)) +1;
% end
% bins = bins / 1000;
% plot(1:20,bins);
% xlabel('How well it worked?');



% net = patternnet(4);
% net.divideParam.trainRatio = 100/100;
% net.divideParam.valRatio = 0/100;
% net.divideParam.testRatio = 0/100;
% [net,tr] = train(net,inputs,targets);
% 
% 
% remainder = data(1001:end,3:end)';
% outputs = net(remainder);
% evaluation = zeros(9000,2);
% evaluation(:,1) = data(1001:end,1);
% for index = 1:9000
%     evaluation(index,2) = outputs(2,index) > outputs(1,index);
% end



% View the Network

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotconfusion(targets,outputs)

%figure, ploterrhist(errors)
